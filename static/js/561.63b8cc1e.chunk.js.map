{"version":3,"file":"static/js/561.63b8cc1e.chunk.js","mappings":"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","sources":["shared/lib/classNames/classNames.tsx","webpack://cityticket/./src/features/Map/Map.module.scss?2cc5","features/Map/Map.tsx","webpack://cityticket/./src/features/MapDrag/MapDrag.module.scss?976f","features/MapDrag/MapDrag.tsx","webpack://cityticket/./src/shared/ui/Button/Button.module.scss?cbd2","shared/ui/Button/Button.tsx","webpack://cityticket/./src/features/MapLoader/Maploader.module.scss?dd5a","features/MapLoader/MapLoader.tsx","shared/ui/PageWrapper/PageWrapper.module.scss","shared/ui/PageWrapper/PageWrapper.tsx","pages/MainPage/ui/MainPage/MainPage.tsx"],"sourcesContent":["export type Mods = Record<string, boolean | string | undefined>\n\nexport function classNames(\n    cls: string,\n    mods: Mods = {},\n    additional: Array<string | undefined> = [],\n): string {\n    return [\n        cls,\n        ...additional.filter(Boolean),\n        ...Object.entries(mods)\n            .filter(([_, value]) => Boolean(value))\n            .map(([className]) => className),\n    ]\n        .join(' ');\n}\n\n\n","// extracted by mini-css-extract-plugin\nexport default {\"Map\":\"Map_Map__CK0pD\",\"red\":\"Map_red__8xZLW\"};","import {attributesSvgType} from 'entity/Map';\nimport {memo, ReactNode, ReactSVGElement, useEffect, useRef, useState} from 'react';\nimport {classNames, Mods} from \"shared/lib/classNames/classNames\";\nimport {ReactSVG} from 'react-svg';\nimport {Button} from \"shared/ui/Button/Button\";\nimport cls from \"./Map.module.scss\"\nimport {Simulate} from \"react-dom/test-utils\";\nimport click = Simulate.click;\n\n\ninterface MapProps {\n    className?: string\n    children?: ReactNode\n    apiSvg: string\n    scale: number\n}\n\n\nexport const Map = memo((props: MapProps) => {\n    const [listId, setListId] = useState<string[]>(['parter_1_1', 'parter_2_1', 'parter_3_1', 'parter_4_1', 'parter_5_1', 'parter_8_1', 'parter_9_1', 'parter_10_1', 'parter_11_12', 'beltaj_right_4_8'])\n    const svgRef = useRef(null)\n\n\n    const handleElementClick = (event: any) => {\n        const clickedElement = event.target;\n        // if (listId.includes(clickedElement.id)) {\n        //     setListId(prevListId => prevListId.filter(id => id !== clickedElement.id));\n        // } else {\n        //     setListId([...listId, clickedElement.id])\n        // }\n\n        console.log(listId)\n        // Применить цвет или другие стили, используя новые координаты и размеры\n        if (clickedElement.style.fill === \"red\") {\n            clickedElement.style.fill = \"\";\n        } else {\n            clickedElement.style.fill = \"red\";\n        }\n\n        // Применить другие стили, используя новые координаты и размеры\n\n        // setSeatList(prevList => [...prevList, 'новое значение']);\n    };\n\n    const update = () => {\n        listId.map((itemId) => {\n            const click = document.getElementById(itemId)\n            if (click) {\n                click.classList.add('red')\n                click.setAttribute('style', 'fill: red'); // Установка цвета напрямую через атрибут fill\n                click.style.fill = \"red\"; // Обновление стиля для немедленного отображения изменений\n            }\n            // if (elementSvg) {\n            //     elementSvg.setAttribute('fill', 'red');\n            //     // console.log(elementSvg)\n            //     // Здесь вы можете выполнить нужные действия с найденным элементом SVG\n            // }\n        })\n    };\n\n\n    const handletest = () => {\n        console.log(\"функция сработала\")\n        listId.map((itemId) => {\n            const click = document.getElementById(itemId)\n            if (click) {\n                click.classList.add('red')\n                click.setAttribute('style', 'fill: red'); // Установка цвета напрямую через атрибут fill\n                click.style.fill = \"red\"; // Обновление стиля для немедленного отображения изменений\n            }\n        });\n    }\n    useEffect(() => {\n        handletest(); // Вызов функции handletest при монтировании компонента\n    }, []);\n    const {\n        className,\n        children,\n        apiSvg,\n        scale,\n        ...otherProps\n    } = props\n\n    const mods: Mods = {};\n\n    return (\n        <div\n            className={classNames(cls.Map, mods, [className])}\n            {...otherProps}\n        >\n            <ReactSVG\n                className={cls.Map}\n                src={apiSvg}\n                style={{transform: `scale(${scale})`, transformOrigin: 'left top'}}\n                onClick={handleElementClick}\n                ref={svgRef}\n            />\n\n        </div>\n    );\n});","// extracted by mini-css-extract-plugin\nexport default {\"MapDrag\":\"MapDrag_MapDrag__mO9eW\"};","import { memo, ReactNode, MouseEvent, useRef } from 'react';\nimport { classNames, Mods } from 'shared/lib/classNames/classNames';\nimport cls from './MapDrag.module.scss';\n\ninterface MapDragProps {\n  className?: string;\n  children?: ReactNode;\n}\n\nexport const MapDrag = memo((props: MapDragProps) => {\n  const svgRef = useRef<HTMLDivElement>(null);\n\n  let isDragging = false;\n  let offset = { x: 0, y: 0 };\n\n  const handleMouseDown = (e: MouseEvent) => {\n    isDragging = true;\n    const element = svgRef.current;\n\n    if (element) {\n      offset.x = element.offsetLeft - e.clientX;\n      offset.y = element.offsetTop - e.clientY;\n    }\n  };\n\n  const handleMouseUp = () => {\n    isDragging = false;\n  };\n\n  const handleMouseMove = (e: MouseEvent) => {\n    if (isDragging) {\n      const element = svgRef.current;\n      if (element) {\n        element.style.left = `${e.clientX + offset.x}px`;\n        element.style.top = `${e.clientY + offset.y}px`;\n      }\n    }\n  };\n\n  const { className, children, ...otherProps } = props;\n\n  const mods: Mods = {};\n\n  return (\n    <div\n      className={classNames(cls.MapDrag, mods, [className])}\n      {...otherProps}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseMove={handleMouseMove}\n      ref={svgRef}\n    >\n      {children}\n    </div>\n  );\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"Button\":\"Button_Button__KZLLT\"};","import {ButtonHTMLAttributes, memo, ReactNode} from 'react';\nimport {classNames, Mods} from \"shared/lib/classNames/classNames\";\nimport cls from \"./Button.module.scss\"\n\ninterface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n    className?: string\n    children?: ReactNode\n}\n\n\nexport const Button = memo((props: ButtonProps) => {\n    const {\n        className,\n        children,\n        ...otherProps\n    } = props\n    \n    const mods: Mods = {\n        \n    };\n    \n    return (\n        <button\n            className={classNames(cls.Button, mods, [className])}\n            {...otherProps}\n        >\n            {children}\n        </button>\n    );\n});","// extracted by mini-css-extract-plugin\nexport default {\"Maploader\":\"Maploader_Maploader__PS+fr\",\"buttonGroup\":\"Maploader_buttonGroup__kojEH\",\"dragWrapper\":\"Maploader_dragWrapper__s2mOB\"};","import React, {memo, ReactNode, useEffect, useState} from 'react';\nimport {classNames, Mods} from \"shared/lib/classNames/classNames\";\nimport axios from \"axios\";\nimport {Map} from \"../Map/Map\";\nimport {mapData} from \"entity/MapLoader\";\nimport {MapDrag} from \"../MapDrag/MapDrag\";\nimport svg from \"./converted.svg\"\nimport {Button} from \"../../shared/ui/Button/Button\";\nimport cls from \"./Maploader.module.scss\";\n\n\ninterface MapLoaderProps {\n    className?: string\n    children?: ReactNode\n}\n\n\nexport const MapLoader = memo((props: MapLoaderProps) => {\n        const [scale, setScale] = useState(0.41);\n\n    const {parse, stringify} = require('svgson');\n    const svgson = require('svgson');\n\n    const [svgData, setSvgData] = useState<mapData>();\n\n    // useEffect(() => {\n    //     // Эмуляция запроса к API для получения SVG-схемы\n    //     axios.get('http://tsnext.ru/test/frontend/resources/dkl-tsn.svg')\n    //         .then(async (response) => {\n    //             // Установка загруженной SVG-схемы в состояние\n    //             setSvgData(response.data);\n    //\n    //             // Преобразование SVG в объект JSON\n    //             const json = await parse(response.data);\n    //             // const foundObject = json.children.find((item: any) => item.name === \"g\");\n    //             // console.log(json)\n    //             setSvgData(json)\n    //         })\n    //         .catch(error => {\n    //             console.error('Ошибка загрузки SVG-схемы:', error);\n    //         });\n    // }, []);\n\n\n        const handleZoomIn = () => {\n        setScale(scale => scale * 1.2);\n    };\n\n    const handleZoomOut = () => {\n        setScale(scale => scale * 0.8);\n    };\n\n\n    const {\n        className,\n        children,\n        ...otherProps\n    } = props\n\n    const mods: Mods = {};\n\n    return (\n        <div\n            className={classNames(cls.Maploader, mods, [className])}\n            {...otherProps}\n        >\n            <div className={cls.dragWrapper}>\n                            <MapDrag>\n                <Map scale={scale} apiSvg={'https://ci41159.tw1.ru/static/converted.svg'}/>\n            </MapDrag>\n\n            </div>\n                <div className={cls.buttonGroup}>\n                    <Button onClick={handleZoomIn}>+</Button>\n                    <Button onClick={handleZoomOut}>-</Button>\n                </div>\n\n        </div>\n    );\n});","// extracted by mini-css-extract-plugin\nexport default {};","import {memo, ReactNode} from 'react';\nimport {classNames, Mods} from \"shared/lib/classNames/classNames\";\nimport cls from \"./PageWrapper.module.scss\"\n\ninterface PageWrapperProps {\n    className?: string\n    children?: ReactNode\n}\n\n\nexport const PageWrapper = memo((props: PageWrapperProps) => {\n    const {\n        className,\n        children,\n        ...otherProps\n    } = props\n\n    const mods: Mods = {\n\n    };\n\n    return (\n        <div\n            className={classNames(cls.PageWrapper, mods, [className])}\n            {...otherProps}\n        >\n            {children}\n        </div>\n    );\n});","import {memo, ReactNode} from 'react';\nimport {classNames, Mods} from \"shared/lib/classNames/classNames\";\nimport {MapLoader} from \"../../../../features/MapLoader/MapLoader\";\nimport {PageWrapper} from \"../../../../shared/ui/PageWrapper/PageWrapper\";\n\ninterface MainPageProps {\n    className?: string\n    children?: ReactNode\n}\n\n\nconst MainPage = memo((props: MainPageProps) => {\n    const {\n        className,\n        children,\n        ...otherProps\n    } = props\n\n    const mods: Mods = {};\n\n    return (\n        <PageWrapper>\n            <div\n                className={classNames('', mods, [className])}\n                {...otherProps}\n            >\n                {children}\n                <MapLoader/>\n            </div>\n        </PageWrapper>\n    );\n});\nexport default MainPage"],"names":["classNames","cls","mods","arguments","length","undefined","filter","Boolean","Object","entries","_ref","_","value","map","_ref2","className","join","Simulate","click","Map","memo","props","listId","setListId","useState","svgRef","useRef","useEffect","console","log","itemId","document","getElementById","classList","add","setAttribute","style","fill","children","apiSvg","scale","otherProps","_jsx","ReactSVG","src","transform","concat","transformOrigin","onClick","event","clickedElement","target","ref","MapDrag","isDragging","offset","x","y","onMouseDown","e","element","current","offsetLeft","clientX","offsetTop","clientY","onMouseUp","handleMouseUp","onMouseMove","left","top","Button","MapLoader","setScale","parse","stringify","require","svgData","setSvgData","_jsxs","handleZoomIn","handleZoomOut","PageWrapper"],"sourceRoot":""}